blueprint:
  name: Double click dimmer
  description: Double click cycles through three steps of brightness
  domain: automation
  input:
    input_button:
      name: Input button
      description: Input button
      selector:
        entity:
          filter:
            - domain: 
              - input_button
              - sensor #sonoff button
    light:
      name: Light
      description: Light to control
      selector:
        entity:
          filter:
          - domain:
            - light
          multiple: false
    low_brightness:
      name: Low brightness value
      description: Lowest brightness value.
      default: 85
      selector:
        number:
          min: 0
          max: 255
          mode: slider
          step: 1
    med_brightness:
      name: Medium brightness value
      description: Medium brightness value.
      default: 170
      selector:
        number:
          min: 0
          max: 255
          mode: slider
          step: 1
    high_brightness:
      name: High brightness value
      description: High brightness value.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          mode: slider
          step: 1
  source_url: https://github.com/martin-olsen/home-assistant-scripts/blob/main/blueprints/automation/double_click_dimmer.yaml

mode: single

trigger:
- platform: state
  entity_id: !input input_button
  to: "double"

action:
- variables:
    light_id: !input light
    current_brightness: '{{ state_attr( light_id, ''brightness'') | int }}'
    low_setting: !input low_brightness
    medium_setting: !input med_brightness
    high_setting: !input high_brightness
    brightness_cycle_states: '{{ [low_setting, medium_setting, high_setting] }}'
- repeat:
    while: '{{ (state_attr( light_id, ''brightness'') | int) == current_brightness and (brightness_cycle_states | count) >= repeat.index }}' #while nothing changed and elements in list
    sequence:
    - choose: 
      - conditions:
        - condition: or
          conditions:
            - '{{ brightness_cycle_states[repeat.index - 1] > current_brightness}}'
            - '{{ repeat.index == 1 and current_brightness >= (brightness_cycle_states[-1] | int) }}'
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              brightness: '{{ brightness_cycle_states[repeat.index - 1] }}'
          - wait_template: '{{ (state_attr( light_id, ''brightness'') | int) == (brightness_cycle_states[repeat.index - 1] | int) }}'
